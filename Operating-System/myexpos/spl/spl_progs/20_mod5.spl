//Scheduler module

alias currPID R0;
currPID = [SYSTEM_STATUS_TABLE + 1];
multipush(BP);
alias process_table R1;
process_table = PROCESS_TABLE + currPID*16;
[process_table + 12] = SP%512;
[process_table + 14] = PTBR;
[process_table + 15] = PTLR;

alias i R3;
i = currPID + 1;
while(i<MAX_PROC_NUM)do
     if([PROCESS_TABLE+ i*16 + 4] == CREATED || [PROCESS_TABLE+ i*16 + 4] == READY)then
           break;
     endif;      
     i = i + 1;
endwhile;
alias newPID R2;
newPID = i;
if(i == MAX_PROC_NUM)then
     newPID = 0;
endif;
process_table = PROCESS_TABLE + newPID*16;
SP = [process_table + 11]*512 + [process_table + 12];
PTBR = [process_table + 14];
PTLR = [process_table + 15];          
[SYSTEM_STATUS_TABLE + 1] = newPID; 
if([process_table + 4]==CREATED)then
	//restoring BP from kernel stack top
	BP=[[process_table+11]*512];
	SP=[process_table + 13];
	[process_table + 4]=RUNNING;
	[process_table + 9]=0;
	ireturn;
endif;
[process_table + 4] = RUNNING;
[process_table + 9] = 0;
multipop(BP);
return;
