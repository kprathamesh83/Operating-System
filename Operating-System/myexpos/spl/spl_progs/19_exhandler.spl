//int 9

breakpoint;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = -1;

//save SP into UPTR and change to kernel stack
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13] = SP;
SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
backup;

multipush(EIP);

if(EC==1) then
	backup;
	print("Illegal instruction");
	print([SYSTEM_STATUS_TABLE + 1]);
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE+1];
	call PROCESS_MANAGER;
	restore;
	call CONTEXT_SWITCH;
endif;

if(EC==2) then

	backup;
	print("Illegal access");
	print([SYSTEM_STATUS_TABLE + 1]);
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE+1];
	call PROCESS_MANAGER;
	restore;
	
	call CONTEXT_SWITCH;
endif;

if(EC == 3) then
	backup;	
	print("Illegal expression");
	R1 = EXIT_PROCESS;
	R2 = [SYSTEM_STATUS_TABLE+1];
	call PROCESS_MANAGER;
	restore;

	call CONTEXT_SWITCH;
endif;

if(EC == 0) then
	if((EPN == 2) || (EPN == 3)) then
		R1 = GET_FREE_PAGE;
		call MOD_2;
		[PTBR+EPN*2] = R0;
		[PTBR+EPN*2+1] = "1110";
	
		R1 = GET_FREE_PAGE;
		call MOD_2;
		[PTBR+EPN*2] = R0;
		[PTBR+EPN*2+1] = "1110";
	endif;

	if((EPN==4) || (EPN==5) || (EPN==6) || (EPN==7)) then
		R1 = GET_CODE_PAGE;
		R2 = [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+EPN];
		breakpoint;
		call MOD_2;
			
		[PTBR+EPN*2] = R0;
		[PTBR+EPN*2+1] = "1100";
	endif;

endif;

multipop(EIP);
restore;

SP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
SP = SP + 1;

[[PTBR+((SP*2)/512)]*512+(SP%512)] = EIP;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 0;
ireturn;
	
